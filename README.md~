# 规则引擎


## 1. 背景
目前随着业务发展已经系统复杂性增加，需要使用规则引擎来管理一些业务上的规则，用于动态配置（因为本着配置优于代码）。
这边急需一套规则引擎来达到以下要求与目的：
* 动态配置规则，无须复杂的代码开发
* 规则易懂，不仅开发还是产品与测试都能理解并且能配置规则
* 能够创建独立的标签库，进而配置规则表达式，然后根据这些标签与表达式进行组合，达到复用的效果。

## 2.技术选型
市面上开源的规则表达式主流有[aviator](https://github.com/killme2008/aviatorscript)，以及[easy-rules](https://github.com/j-easy/easy-rules),这两个开源框架轻量，简单明了，适合我们绝大部分场景。Aviator 和 Easy Rules 都是规则引擎/表达式引擎，但它们的定位和功能侧重点有所不同。以下是两者的主要对比：
### 2.1 表达式能力对比
#### Aviator
1. 更丰富的运算符：支持算术、逻辑、位运算、集合操作等完整运算符集
2. 更强的计算能力：内置数学函数、字符串处理、正则表达式等
3. 类型系统：支持动态类型推断，对数字、字符串、集合等有良好支持
4. 性能优化：编译执行，性能较高
5. 适合场景：复杂表达式计算、数据转换、条件判断等

#### Easy Rules
1. 更简单的条件表达式：主要支持基本的逻辑判断
2. 规则优先：专注于规则的定义和执行流程
3. 轻量级：表达式能力相对简单，但规则管理更系统化
4. 适合场景：业务规则管理、决策表实现等

### 2.2 主要差异
| 特性         | Aviator                      | Easy Rules                   |
|--------------|------------------------------|------------------------------|
| **核心定位** | 表达式求值引擎               | 规则引擎框架                 |
| **表达式复杂度** | 高，支持复杂运算          | 中，侧重条件判断             |
| **执行性能** | 高(编译执行)                 | 中(解释执行)                 |
| **规则管理** | 无                           | 提供完整规则定义和管理机制   |
| **扩展性**   | 可自定义函数                 | 可自定义规则和动作           |
| **学习曲线** | 较低                         | 中等                         |

### 2.3 选择建议
* 需要复杂计算/表达式处理：选择 Aviator
* 需要完整规则管理系统：选择 Easy Rules
* 两者结合：可以在 Easy Rules 的规则条件中使用 Aviator 来处理复杂表达式

### 2.4 计划
我们这边的将选择Aviator与Easy-rules结合，采用Aviator作为表达式计算，Easy-Rules作为规则管理。
下面是我的计划安排
1. 第一阶段
* 利用Avitor做成一个规则引擎的工具类，定义规则以及规则的组合，解析规则，执行条件表达式。
2. 第二阶段
* 集成Easy-Rules用于规则管理，aviator作为条件表达式执行则，easy-rules作为规则管理。
3. 第三阶段
* 建立标签系统
* 建立客群系统，通过选择标签系统，配置客群规则，创建规则组，达到组合复用的效果。
* 可视化管理规则组，建立规则后管。

